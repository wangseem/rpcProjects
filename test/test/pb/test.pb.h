// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
class testreq;
struct testreqDefaultTypeInternal;
extern testreqDefaultTypeInternal _testreq_default_instance_;
class testres;
struct testresDefaultTypeInternal;
extern testresDefaultTypeInternal _testres_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::testreq* Arena::CreateMaybeMessage<::testreq>(Arena*);
template<> ::testres* Arena::CreateMaybeMessage<::testres>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class testreq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testreq) */ {
 public:
  inline testreq() : testreq(nullptr) {}
  ~testreq() override;
  explicit constexpr testreq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  testreq(const testreq& from);
  testreq(testreq&& from) noexcept
    : testreq() {
    *this = ::std::move(from);
  }

  inline testreq& operator=(const testreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline testreq& operator=(testreq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const testreq& default_instance() {
    return *internal_default_instance();
  }
  static inline const testreq* internal_default_instance() {
    return reinterpret_cast<const testreq*>(
               &_testreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(testreq& a, testreq& b) {
    a.Swap(&b);
  }
  inline void Swap(testreq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  testreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<testreq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const testreq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const testreq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(testreq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testreq";
  }
  protected:
  explicit testreq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestnameFieldNumber = 1,
    kTestmethodFieldNumber = 2,
  };
  // string testname = 1;
  void clear_testname();
  const std::string& testname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testname();
  PROTOBUF_NODISCARD std::string* release_testname();
  void set_allocated_testname(std::string* testname);
  private:
  const std::string& _internal_testname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testname(const std::string& value);
  std::string* _internal_mutable_testname();
  public:

  // string testmethod = 2;
  void clear_testmethod();
  const std::string& testmethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testmethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testmethod();
  PROTOBUF_NODISCARD std::string* release_testmethod();
  void set_allocated_testmethod(std::string* testmethod);
  private:
  const std::string& _internal_testmethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testmethod(const std::string& value);
  std::string* _internal_mutable_testmethod();
  public:

  // @@protoc_insertion_point(class_scope:testreq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testmethod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class testres final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testres) */ {
 public:
  inline testres() : testres(nullptr) {}
  ~testres() override;
  explicit constexpr testres(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  testres(const testres& from);
  testres(testres&& from) noexcept
    : testres() {
    *this = ::std::move(from);
  }

  inline testres& operator=(const testres& from) {
    CopyFrom(from);
    return *this;
  }
  inline testres& operator=(testres&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const testres& default_instance() {
    return *internal_default_instance();
  }
  static inline const testres* internal_default_instance() {
    return reinterpret_cast<const testres*>(
               &_testres_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(testres& a, testres& b) {
    a.Swap(&b);
  }
  inline void Swap(testres* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testres* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  testres* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<testres>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const testres& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const testres& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(testres* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testres";
  }
  protected:
  explicit testres(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestnameFieldNumber = 1,
    kTestmethondFieldNumber = 2,
  };
  // string testname = 1;
  void clear_testname();
  const std::string& testname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testname();
  PROTOBUF_NODISCARD std::string* release_testname();
  void set_allocated_testname(std::string* testname);
  private:
  const std::string& _internal_testname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testname(const std::string& value);
  std::string* _internal_mutable_testname();
  public:

  // string testmethond = 2;
  void clear_testmethond();
  const std::string& testmethond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testmethond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testmethond();
  PROTOBUF_NODISCARD std::string* release_testmethond();
  void set_allocated_testmethond(std::string* testmethond);
  private:
  const std::string& _internal_testmethond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testmethond(const std::string& value);
  std::string* _internal_mutable_testmethond();
  public:

  // @@protoc_insertion_point(class_scope:testres)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testmethond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class testservice_Stub;

class testservice : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline testservice() {};
 public:
  virtual ~testservice();

  typedef testservice_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::testreq* request,
                       ::testres* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(testservice);
};

class testservice_Stub : public testservice {
 public:
  testservice_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  testservice_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~testservice_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements testservice ------------------------------------------

  void test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::testreq* request,
                       ::testres* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(testservice_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// testreq

// string testname = 1;
inline void testreq::clear_testname() {
  testname_.ClearToEmpty();
}
inline const std::string& testreq::testname() const {
  // @@protoc_insertion_point(field_get:testreq.testname)
  return _internal_testname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testreq::set_testname(ArgT0&& arg0, ArgT... args) {
 
 testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testreq.testname)
}
inline std::string* testreq::mutable_testname() {
  std::string* _s = _internal_mutable_testname();
  // @@protoc_insertion_point(field_mutable:testreq.testname)
  return _s;
}
inline const std::string& testreq::_internal_testname() const {
  return testname_.Get();
}
inline void testreq::_internal_set_testname(const std::string& value) {
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* testreq::_internal_mutable_testname() {
  
  return testname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* testreq::release_testname() {
  // @@protoc_insertion_point(field_release:testreq.testname)
  return testname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void testreq::set_allocated_testname(std::string* testname) {
  if (testname != nullptr) {
    
  } else {
    
  }
  testname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (testname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    testname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testreq.testname)
}

// string testmethod = 2;
inline void testreq::clear_testmethod() {
  testmethod_.ClearToEmpty();
}
inline const std::string& testreq::testmethod() const {
  // @@protoc_insertion_point(field_get:testreq.testmethod)
  return _internal_testmethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testreq::set_testmethod(ArgT0&& arg0, ArgT... args) {
 
 testmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testreq.testmethod)
}
inline std::string* testreq::mutable_testmethod() {
  std::string* _s = _internal_mutable_testmethod();
  // @@protoc_insertion_point(field_mutable:testreq.testmethod)
  return _s;
}
inline const std::string& testreq::_internal_testmethod() const {
  return testmethod_.Get();
}
inline void testreq::_internal_set_testmethod(const std::string& value) {
  
  testmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* testreq::_internal_mutable_testmethod() {
  
  return testmethod_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* testreq::release_testmethod() {
  // @@protoc_insertion_point(field_release:testreq.testmethod)
  return testmethod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void testreq::set_allocated_testmethod(std::string* testmethod) {
  if (testmethod != nullptr) {
    
  } else {
    
  }
  testmethod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testmethod,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (testmethod_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    testmethod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testreq.testmethod)
}

// -------------------------------------------------------------------

// testres

// string testname = 1;
inline void testres::clear_testname() {
  testname_.ClearToEmpty();
}
inline const std::string& testres::testname() const {
  // @@protoc_insertion_point(field_get:testres.testname)
  return _internal_testname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testres::set_testname(ArgT0&& arg0, ArgT... args) {
 
 testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testres.testname)
}
inline std::string* testres::mutable_testname() {
  std::string* _s = _internal_mutable_testname();
  // @@protoc_insertion_point(field_mutable:testres.testname)
  return _s;
}
inline const std::string& testres::_internal_testname() const {
  return testname_.Get();
}
inline void testres::_internal_set_testname(const std::string& value) {
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* testres::_internal_mutable_testname() {
  
  return testname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* testres::release_testname() {
  // @@protoc_insertion_point(field_release:testres.testname)
  return testname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void testres::set_allocated_testname(std::string* testname) {
  if (testname != nullptr) {
    
  } else {
    
  }
  testname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (testname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    testname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testres.testname)
}

// string testmethond = 2;
inline void testres::clear_testmethond() {
  testmethond_.ClearToEmpty();
}
inline const std::string& testres::testmethond() const {
  // @@protoc_insertion_point(field_get:testres.testmethond)
  return _internal_testmethond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testres::set_testmethond(ArgT0&& arg0, ArgT... args) {
 
 testmethond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testres.testmethond)
}
inline std::string* testres::mutable_testmethond() {
  std::string* _s = _internal_mutable_testmethond();
  // @@protoc_insertion_point(field_mutable:testres.testmethond)
  return _s;
}
inline const std::string& testres::_internal_testmethond() const {
  return testmethond_.Get();
}
inline void testres::_internal_set_testmethond(const std::string& value) {
  
  testmethond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* testres::_internal_mutable_testmethond() {
  
  return testmethond_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* testres::release_testmethond() {
  // @@protoc_insertion_point(field_release:testres.testmethond)
  return testmethond_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void testres::set_allocated_testmethond(std::string* testmethond) {
  if (testmethond != nullptr) {
    
  } else {
    
  }
  testmethond_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testmethond,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (testmethond_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    testmethond_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testres.testmethond)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
